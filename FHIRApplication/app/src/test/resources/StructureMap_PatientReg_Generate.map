map "https://com.psi.fhir/fhir/StructureMap/PatientRegistration" = 'Patient Registration'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target
uses "http://hl7.org/fhir/StructureDefinition/Encounter" as target
uses "http://hl7.org/fhir/StructureDefinition/Observation" as target

group QuestionnaireResponseToPatientMapping(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.id = uuid() "r_b_id";
    src -> bundle.type = 'collection' "r_bun_type";

    src -> bundle.entry as entry, entry.resource = create('Patient') as patient then {
     src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then
          ExtractPatient(src, patient), ExtractEncounter(src, patient, bundle, encounter) , ExtractObservation_1_1_0(src, bundle, encounter) "r_bun_entries";
    } "r_bun_created";

}


group ExtractPatient(source src : QuestionnaireResponse, target patient: Patient  ) {
    src -> patient.id = uuid() "r_p_id_1";
    src.item as item_bio where(linkId = 'PR') then { // Patient Info
          item_bio.item as item_name where(linkId = 'PR-name') -> patient.name = create('HumanName') as patientName then {
             src -> patientName.family = evaluate(item_name, $this.item.where(linkId = 'PR-name-family').answer.value) "r_p_fname";
             src -> patientName.given = evaluate(item_name, $this.item.where(linkId = 'PR-name-given').answer.value) "r_p_gname";
          } "r_p_name";

          item_bio.item as item_dob where(linkId = 'PR-birth-date' and answer.count() > 0) -> patient.birthDate = evaluate(item_dob, $this.answer.value) "r_p_dob";

          src -> patient.gender = evaluate(item_bio, $this.item.where(linkId = 'PR-gender').answer.value.code) "r_p_gender";

          item_bio.item as item_tele where (linkId = 'PR-telecom') -> patient.telecom = create('ContactPoint') as patientContact then {
             src -> patientContact.value = evaluate(item_tele, $this.item.where(linkId = 'PR-telecom-value').answer.value) "r_p_tel_num";
             src -> patientContact.system = "phone" "r_p_tel_sys";
          } "r_p_tel";

          item_bio.item as item_addr where (linkId = 'PR-address') -> patient.address = create('Address') as patientAddress then {
             src -> patientAddress.city = evaluate(item_addr, $this.item.where(linkId = 'PR-address-city').answer.value) "r_p_add_cty";
             src -> patientAddress.country = evaluate(item_addr, $this.item.where(linkId = 'PR-address-country').answer.value) "r_p_add_cntry";
             src -> patientAddress.use = "home" "r_p_add_use";
             src -> patientAddress.type = "physical" "r_p_add_typ";
          } "r_p_addr";


          src -> patient.active = evaluate(item_bio, $this.item.where(linkId = 'PR-active').answer.value) "r_p_act";

         /* item_bio.item as item_iden where(linkId = 'PR-identifier-info') -> patient.identifier = create('Identifier') as patientIdent then {
            src -> patientIdent.value = evaluate(item_iden, $this.item.where(linkId = 'PR-identifier-nid').answer.value) "r_p_iden_val";
          } "r_p_iden";

         item_bio.item as item_age where(linkId = 'PR-age' and answer.count() > 0) -> patient.birthDate = evaluate(item_age, today() - ($this.answer.value.toString() + " 'years'").toQuantity()) "r_p_age";

          item_bio.item as item_marital where(linkId = 'PR-marital-status') -> patient.maritalStatus = create('CodeableConcept') as mcc then {
             src -> mcc.coding = evaluate(item_marital, $this.answer.value) "r_p_martial_cod";
          } "r_p_marital";

          item_bio.item as item_tele where (linkId = 'PR-telecom') -> patient.telecom = create('ContactPoint') as patientContact then {
             src -> patientContact.value = evaluate(item_tele, $this.item.where(linkId = 'PR-telecom-value').answer.value) "r_p_tel_num";
             src -> patientContact.system = "phone" "r_p_tel_sys";
          } "r_p_tel";

          item_bio.item as item_eth where (linkId = 'PR-ethnicity-group') -> patient.extension = create('Extension') as patientEthnicity then {
            src -> patientEthnicity.url = evaluate(item_eth, $this.item.where(linkId = 'PR-ethnicity-authority').answer.value) "r_p_eth_url";
            src -> patientEthnicity.value = evaluate(item_eth, $this.item.where(linkId = 'PR-ethnicity').answer.value) "r_p_eth_val";
          } "r_p_eth";

          item_bio.item as item_occ where (linkId = 'PR-occupation-group') -> patient.extension = create('Extension') as patientOccupation then {
           src -> patientOccupation.url = evaluate(item_occ, $this.item.where(linkId = 'PR-occupation-authority').answer.value) "r_p_occ_url";
           src -> patientOccupation.value = evaluate(item_occ, $this.item.where(linkId = 'PR-occupation').answer.value) "r_p_occ_val";
          } "r_p_occ";  */

       };

}

group ExtractEncounter(source src : QuestionnaireResponse, source patient : Patient, target bundle: Bundle, target encounter: Encounter ) {
   src -> encounter.id = uuid() "r_enc_id";
   src -> encounter.status = 'finished' "r_enc_status";
   src -> encounter.subject = reference(patient) "r_en_sub";

   src -> encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "r_en_cls";
   src -> encounter.period = create('Period') as enPeriod then {
       src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
       src -> enPeriod.end = evaluate(src, now()) "r_en_per_end";
   } "r_en_per";

}


group ExtractObservation_1_1_0(source src : QuestionnaireResponse, target bundle : Bundle, target encounter : Encounter ) {
    src.item as item_bio where(linkId = '1.0.0' ) then {
      src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
         src -> obs.id = uuid() "r_ob_id";
         src -> obs.status = "final" "r_ob_st";
         src -> obs.encounter = reference(encounter) "r_ob_en";
         src -> obs.effective = evaluate(src, now()) "r_ob_eff";

        item_bio.item as item_data where (linkId = '1.1.0' and answer.count() > 0) then {
            item_data.answer as valueanswer -> obs.value = create('CodeableConcept') as codeableConcept then {
              valueanswer -> codeableConcept.coding = evaluate(item_data, valueanswer.value.code) "r_ob_cc_cod";
              valueanswer -> codeableConcept.text = evaluate(item_data, valueanswer.value.display) "r_ob_cc_cod_disp";
           } "r_ob_val";
        } "r_ob_vals";

     } "r_ob_og6";

    } "r_ob_list";
}

